# Generated by Django 2.1.2 on 2018-12-03 11:24

import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import smart_selects.db_fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('userprofile', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('face_descriptor', models.TextField()),
                ('registered_at', models.DateTimeField()),
                ('face_descriptor_version', models.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CustomerVisit',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('purchased_at', models.DateTimeField()),
                ('customer_uuid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_customers', to='organizations.Customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DemographicData',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('age', models.FloatField(blank=True, default=None, null=True)),
                ('gender', models.IntegerField(blank=True, default=None, null=True)),
                ('start_rec_at', models.DateTimeField(blank=True, null=True)),
                ('stop_rec_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, default=None, null=True)),
                ('glasses', models.IntegerField(blank=True, default=None, null=True)),
                ('ethnicity', models.IntegerField(blank=True, default=None, null=True)),
                ('times_resumed', models.IntegerField(blank=True, default=None, null=True)),
                ('min_smile', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_smile', models.IntegerField(blank=True, default=None, null=True)),
                ('max_smile', models.IntegerField(blank=True, default=None, null=True)),
                ('min_happiness', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_happiness', models.IntegerField(blank=True, default=None, null=True)),
                ('max_happiness', models.IntegerField(blank=True, default=None, null=True)),
                ('min_surprise', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_surprise', models.IntegerField(blank=True, default=None, null=True)),
                ('max_surprise', models.IntegerField(blank=True, default=None, null=True)),
                ('min_fear', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_fear', models.IntegerField(blank=True, default=None, null=True)),
                ('max_fear', models.IntegerField(blank=True, default=None, null=True)),
                ('min_anger', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_anger', models.IntegerField(blank=True, default=None, null=True)),
                ('max_anger', models.IntegerField(blank=True, default=None, null=True)),
                ('min_neutral', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_neutral', models.IntegerField(blank=True, default=None, null=True)),
                ('max_neutral', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_disgust', models.IntegerField(blank=True, default=None, null=True)),
                ('max_disgust', models.IntegerField(blank=True, default=None, null=True)),
                ('min_disgust', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_sadness', models.IntegerField(blank=True, default=None, null=True)),
                ('min_sadness', models.IntegerField(blank=True, default=None, null=True)),
                ('max_sadness', models.IntegerField(blank=True, default=None, null=True)),
                ('face_looked_attention_time', models.IntegerField(blank=True, default=None, null=True)),
                ('face_descriptor', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Firmware',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('sensor_type', models.CharField(choices=[('Ubuntu', 'Ubuntu'), ('Balena', 'Balena'), ('NUC Luna V1', 'NUC Luna V1'), ('XOVIS PC2', 'XOVIS PC2')], default='Ubuntu', max_length=255)),
                ('firmware_version', models.FloatField(default=1.0)),
                ('firmware_file', models.FileField(upload_to='Documents/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_api_key', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.CharField(blank=True, max_length=255, null=True)),
                ('endpoint', models.CharField(blank=True, max_length=255, null=True)),
                ('body_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('request_start', models.DateTimeField(blank=True, null=True)),
                ('request_finish', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PointOfSale',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('client_pos_uuid', models.CharField(max_length=255, unique=True)),
                ('seconds_offset', models.IntegerField(default=None)),
                ('use_face_descriptor_matching', models.BooleanField(default=False)),
                ('client_uuid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pos_clients', to='userprofile.Client')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('image', models.FileField(blank=True, null=True, upload_to='Products/')),
                ('client_product_sku', models.CharField(max_length=255, unique=True)),
                ('client_product_category_sku', models.CharField(max_length=255, unique=True)),
                ('profit_per_unit', models.FloatField(blank=True, default=None, null=True)),
                ('active', models.BooleanField(default=True)),
                ('client_uuid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_clients', to='userprofile.Client')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('image', models.FileField(blank=True, null=True, upload_to='ProductCategory/')),
                ('client_product_category_sku', models.CharField(max_length=255, unique=True)),
                ('active', models.BooleanField(default=True)),
                ('client_uuid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_cat_clients', to='userprofile.Client')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('api_key', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('type', models.CharField(choices=[('Ubuntu', 'Ubuntu'), ('Balena', 'Balena'), ('NUC Luna V1', 'NUC Luna V1'), ('XOVIS PC2', 'XOVIS PC2')], default='Balena', max_length=255)),
                ('balena_uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('balena_application_uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('last_online', models.DateTimeField(auto_now_add=True)),
                ('last_data_received', models.DateTimeField(auto_now_add=True)),
                ('fingerprint', models.TextField(blank=True, null=True)),
                ('fingerprint_file', models.FileField(blank=True, null=True, upload_to='FingerprintFiles/')),
                ('last_demographics_received_at', models.DateTimeField(auto_now=True)),
                ('last_online_at', models.DateTimeField(auto_now=True)),
                ('cpu_usage', models.FloatField(blank=True, default=None, null=True)),
                ('cpu_temperature', models.FloatField(blank=True, default=None, null=True)),
                ('ram_usage', models.FloatField(blank=True, default=None, null=True)),
                ('firmware_version', models.FloatField(default=1.0)),
                ('sensor_type', models.CharField(blank=True, max_length=255, null=True)),
                ('force_update_firmware', models.BooleanField(default=False)),
                ('force_default_firmware', models.BooleanField(default=False)),
                ('force_reboot', models.BooleanField(default=False)),
                ('force_shutdown', models.BooleanField(default=False)),
                ('force_config', models.BooleanField(default=False)),
                ('config_text', models.CharField(blank=True, max_length=255, null=True)),
                ('face_descriptor_version', models.CharField(default='52', max_length=255)),
                ('face_sdk_version', models.CharField(default='3.6.7', max_length=255)),
                ('last_data_received_warning', models.BooleanField(default=True)),
                ('license', models.TextField(blank=True, null=True)),
                ('client_uuid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sensor_clients', to='userprofile.Client')),
                ('default_firmware_uuid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensor_firmwares', to='organizations.Firmware')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(max_length=255)),
                ('state', models.CharField(max_length=255)),
                ('country', models.CharField(max_length=255)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('active', models.BooleanField(default=True)),
                ('image', models.FileField(upload_to='StoreImages/')),
                ('telephone', models.CharField(max_length=255)),
                ('fax', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=255)),
                ('store_manager', models.CharField(max_length=255)),
                ('client_uuid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_clients', to='userprofile.Client')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='regions', to='userprofile.Region')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('USD', 'USD'), ('GBP', 'GBP')], default='EUR', max_length=255)),
                ('currency_exchange_rate', models.FloatField(blank=True, default=None, null=True)),
                ('purchased_at', models.DateTimeField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, default=None, null=True)),
                ('amount', models.FloatField(blank=True, default=None, null=True)),
                ('discount', models.FloatField(blank=True, default=None, null=True)),
                ('vat', models.FloatField(blank=True, default=None, null=True)),
                ('age', models.IntegerField(blank=True, default=None, null=True)),
                ('gender', models.IntegerField(blank=True, default=None, null=True)),
                ('start_rec_at', models.DateTimeField(blank=True, null=True)),
                ('stop_rec_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, default=None, null=True)),
                ('glasses', models.IntegerField(blank=True, default=None, null=True)),
                ('ethnicity', models.IntegerField(blank=True, default=None, null=True)),
                ('times_resumed', models.IntegerField(blank=True, default=None, null=True)),
                ('min_smile', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_smile', models.IntegerField(blank=True, default=None, null=True)),
                ('max_smile', models.IntegerField(blank=True, default=None, null=True)),
                ('min_happiness', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_happiness', models.IntegerField(blank=True, default=None, null=True)),
                ('max_happiness', models.IntegerField(blank=True, default=None, null=True)),
                ('min_surprise', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_surprise', models.IntegerField(blank=True, default=None, null=True)),
                ('max_surprise', models.IntegerField(blank=True, default=None, null=True)),
                ('min_fear', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_fear', models.IntegerField(blank=True, default=None, null=True)),
                ('max_fear', models.IntegerField(blank=True, default=None, null=True)),
                ('min_anger', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_anger', models.IntegerField(blank=True, default=None, null=True)),
                ('max_anger', models.IntegerField(blank=True, default=None, null=True)),
                ('min_neutral', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_neutral', models.IntegerField(blank=True, default=None, null=True)),
                ('max_neutral', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_disgust', models.IntegerField(blank=True, default=None, null=True)),
                ('max_disgust', models.IntegerField(blank=True, default=None, null=True)),
                ('min_disgust', models.IntegerField(blank=True, default=None, null=True)),
                ('matcher_has_run', models.BooleanField(default=False)),
                ('has_demographics', models.BooleanField(default=False)),
                ('customer_matched', models.BooleanField(default=False)),
                ('weather_matcher_has_run', models.BooleanField(default=False)),
                ('meta', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('weather_time', models.DateTimeField(blank=True, null=True)),
                ('weather_summary', models.CharField(blank=True, max_length=255, null=True)),
                ('weather_icon', models.CharField(blank=True, max_length=255, null=True)),
                ('weather_precipIntensity', models.FloatField(blank=True, null=True)),
                ('weather_precipProbability', models.FloatField(blank=True, null=True)),
                ('precipAccumulation', models.FloatField(blank=True, null=True)),
                ('precipType', models.CharField(blank=True, max_length=255, null=True)),
                ('weather_temperature', models.FloatField(blank=True, null=True)),
                ('weather_apparentTemperature', models.FloatField(blank=True, null=True)),
                ('weather_dewPoint', models.FloatField(blank=True, null=True)),
                ('weather_humidity', models.FloatField(blank=True, null=True)),
                ('weather_pressure', models.FloatField(blank=True, null=True)),
                ('weather_windSpeed', models.FloatField(blank=True, null=True)),
                ('windGust', models.FloatField(blank=True, null=True)),
                ('weather_windBearing', models.FloatField(blank=True, null=True)),
                ('weather_cloudCover', models.FloatField(blank=True, null=True)),
                ('weather_uvIndex', models.FloatField(blank=True, null=True)),
                ('weather_visibility', models.FloatField(blank=True, null=True)),
                ('ozone', models.FloatField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('in_house', models.CharField(blank=True, max_length=255, null=True)),
                ('payment_type', models.CharField(choices=[('Cash', 'Cash'), ('Check', 'Check'), ('Credit Card', 'Credit Card'), ('Credit Account', 'Credit Account'), ('Gift Card', 'Gift Card'), ('Debit Card', 'Debit Card'), ('Other', 'Other')], default='Ubuntu', max_length=255)),
                ('client_pos_uuid', models.CharField(max_length=255)),
                ('face_descriptor', models.TextField(blank=True, null=True)),
                ('client_customer_uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('client_transaction_uuid', models.CharField(default=uuid.uuid4, max_length=255, unique=True)),
                ('client_uuid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transaction_clients', to='userprofile.Client')),
                ('customer_uuid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transaction_customers', to='organizations.Customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TransactionLines',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('currency', models.CharField(choices=[('EUR', 'EUR'), ('USD', 'USD'), ('GBP', 'GBP')], default='EUR', max_length=255)),
                ('currency_exchange_rate', models.FloatField(blank=True, default=None, null=True)),
                ('purchased_at', models.DateTimeField(blank=True, null=True)),
                ('price', models.FloatField(blank=True, default=None, null=True)),
                ('amount', models.FloatField(blank=True, default=None, null=True)),
                ('discount', models.FloatField(blank=True, default=None, null=True)),
                ('vat', models.FloatField(blank=True, default=None, null=True)),
                ('age', models.IntegerField(blank=True, default=None, null=True)),
                ('gender', models.IntegerField(blank=True, default=None, null=True)),
                ('start_rec_at', models.DateTimeField(blank=True, null=True)),
                ('stop_rec_at', models.DateTimeField(blank=True, null=True)),
                ('duration', models.IntegerField(blank=True, default=None, null=True)),
                ('glasses', models.IntegerField(blank=True, default=None, null=True)),
                ('ethnicity', models.IntegerField(blank=True, default=None, null=True)),
                ('times_resumed', models.IntegerField(blank=True, default=None, null=True)),
                ('min_smile', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_smile', models.IntegerField(blank=True, default=None, null=True)),
                ('max_smile', models.IntegerField(blank=True, default=None, null=True)),
                ('min_happiness', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_happiness', models.IntegerField(blank=True, default=None, null=True)),
                ('max_happiness', models.IntegerField(blank=True, default=None, null=True)),
                ('min_surprise', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_surprise', models.IntegerField(blank=True, default=None, null=True)),
                ('max_surprise', models.IntegerField(blank=True, default=None, null=True)),
                ('min_fear', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_fear', models.IntegerField(blank=True, default=None, null=True)),
                ('max_fear', models.IntegerField(blank=True, default=None, null=True)),
                ('min_anger', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_anger', models.IntegerField(blank=True, default=None, null=True)),
                ('max_anger', models.IntegerField(blank=True, default=None, null=True)),
                ('min_neutral', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_neutral', models.IntegerField(blank=True, default=None, null=True)),
                ('max_neutral', models.IntegerField(blank=True, default=None, null=True)),
                ('avg_disgust', models.IntegerField(blank=True, default=None, null=True)),
                ('max_disgust', models.IntegerField(blank=True, default=None, null=True)),
                ('min_disgust', models.IntegerField(blank=True, default=None, null=True)),
                ('matcher_has_run', models.BooleanField(default=False)),
                ('has_demographics', models.BooleanField(default=False)),
                ('customer_matched', models.BooleanField(default=False)),
                ('weather_matcher_has_run', models.BooleanField(default=False)),
                ('meta', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('weather_time', models.DateTimeField(blank=True, null=True)),
                ('weather_summary', models.CharField(blank=True, max_length=255, null=True)),
                ('weather_icon', models.CharField(blank=True, max_length=255, null=True)),
                ('weather_precipIntensity', models.FloatField(blank=True, null=True)),
                ('weather_precipProbability', models.FloatField(blank=True, null=True)),
                ('precipAccumulation', models.FloatField(blank=True, null=True)),
                ('precipType', models.CharField(blank=True, max_length=255, null=True)),
                ('weather_temperature', models.FloatField(blank=True, null=True)),
                ('weather_apparentTemperature', models.FloatField(blank=True, null=True)),
                ('weather_dewPoint', models.FloatField(blank=True, null=True)),
                ('weather_humidity', models.FloatField(blank=True, null=True)),
                ('weather_pressure', models.FloatField(blank=True, null=True)),
                ('weather_windSpeed', models.FloatField(blank=True, null=True)),
                ('windGust', models.FloatField(blank=True, null=True)),
                ('weather_windBearing', models.FloatField(blank=True, null=True)),
                ('weather_cloudCover', models.FloatField(blank=True, null=True)),
                ('weather_uvIndex', models.FloatField(blank=True, null=True)),
                ('weather_visibility', models.FloatField(blank=True, null=True)),
                ('ozone', models.FloatField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('client_product_name', models.CharField(blank=True, max_length=255, null=True)),
                ('client_product_sku', models.CharField(blank=True, max_length=255, null=True)),
                ('client_product_category_sku', models.CharField(blank=True, max_length=255, null=True)),
                ('client_pos_uuid', models.CharField(max_length=255)),
                ('client_transaction_uuid', models.CharField(blank=True, max_length=255, null=True)),
                ('customer_uuid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tl_customers', to='organizations.Customer')),
                ('transaction_uuid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tl_transactions', to='organizations.Transaction')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Weather',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True)),
                ('time', models.DateTimeField(blank=True, null=True)),
                ('summary', models.CharField(blank=True, max_length=255, null=True)),
                ('icon', models.CharField(blank=True, max_length=255, null=True)),
                ('precipIntensity', models.FloatField(blank=True, default=None, null=True)),
                ('precipProbability', models.FloatField(blank=True, default=None, null=True)),
                ('precipAccumulation', models.FloatField(blank=True, default=None, null=True)),
                ('precipType', models.CharField(blank=True, max_length=255, null=True)),
                ('temperature', models.FloatField(blank=True, default=None, null=True)),
                ('apparentTemperature', models.FloatField(blank=True, default=None, null=True)),
                ('dewPoint', models.FloatField(blank=True, default=None, null=True)),
                ('humidity', models.FloatField(blank=True, default=None, null=True)),
                ('pressure', models.FloatField(blank=True, default=None, null=True)),
                ('windSpeed', models.FloatField(blank=True, default=None, null=True)),
                ('windGust', models.FloatField(blank=True, default=None, null=True)),
                ('windBearing', models.FloatField(blank=True, default=None, null=True)),
                ('cloudCover', models.FloatField(blank=True, default=None, null=True)),
                ('uvIndex', models.FloatField(blank=True, default=None, null=True)),
                ('visibility', models.FloatField(blank=True, default=None, null=True)),
                ('ozone', models.FloatField(blank=True, default=None, null=True)),
                ('store_uuid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weather_stores', to='organizations.Store')),
            ],
        ),
        migrations.AddField(
            model_name='pointofsale',
            name='sensor_uuid',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pos_sensor', to='organizations.Sensor'),
        ),
        migrations.AddField(
            model_name='pointofsale',
            name='store_uuid',
            field=smart_selects.db_fields.GroupedForeignKey(group_field='client_uuid', on_delete=django.db.models.deletion.CASCADE, related_name='pos_stores', to='organizations.Store'),
        ),
        migrations.AddField(
            model_name='demographicdata',
            name='sensor_uuid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='demographic_sensors', to='organizations.Sensor'),
        ),
        migrations.AddField(
            model_name='customervisit',
            name='store_uuid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_stores', to='organizations.Store'),
        ),
        migrations.AddField(
            model_name='customervisit',
            name='transaction_uuid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_transactions', to='organizations.Transaction'),
        ),
        migrations.AlterUniqueTogether(
            name='weather',
            unique_together={('time', 'store_uuid')},
        ),
    ]
